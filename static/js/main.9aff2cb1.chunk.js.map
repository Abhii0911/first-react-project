{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","href","website","title","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAM,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,6BACxB,mCAAML,EAAMI,QAAQE,QACpB,4BAAIN,EAAMI,QAAQG,QAClB,4BAAG,mBAAGC,KAAMR,EAAMI,QAAQK,QAASC,MAAM,kBAAtC,SAAyDV,EAAMI,QAAQK,gBCHrEE,EAAW,SAAAX,GAEpB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMY,SAASC,KAAI,SAAAT,GAClB,OACE,cAAC,EAAD,CAAuBA,QAASA,EAAhC,cAAWA,EAAQC,UCNlBS,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,gCACI,sDACA,uBAAOf,UAAU,SAASgB,KAAK,SAASF,YAAaA,EAAaG,SAAUF,SCiGrEG,G,wDAhGb,aAAc,IAAD,8BACX,gBA+BFH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SA/BvC,EAAKC,MAAQ,CAEXb,SAAU,GACVU,YAAa,IALJ,E,qDAcb,WAAoB,IAAD,OAEjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAG1BF,MAAK,SAAAG,GAAK,OAAK,EAAKT,SAAS,CAACT,SAAUkB,S,oBAgB3C,WAIE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA7B,GAAO,OAAIA,EAAQE,KAAK4B,cAAcC,SAASb,EAAYY,kBAEpG,OACE,sBAAKjC,UAAU,sBAAf,UACA,iDACE,cAAC,EAAD,CACAc,YAAY,qBACZC,aAAgBe,KAAKf,eACrB,cAAC,EAAD,CAAUJ,SAAYoB,EAAtB,sB,GAlDUI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9aff2cb1.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n//passing individual monster as prop from 'classList Component'\nexport const Card = props => (\n    <div className = \"card-container\">\n        <img alt = \"monster\" src= {`https://robohash.org/${props.monster.id}?set=set2& size=150*150`} />\n        <h1> {props.monster.name}</h1>\n        <p>{props.monster.email}</p>\n        <p><a href={props.monster.website} title=\"website address\">{props.monster.website}</a></p>\n    </div>\n)","import React from 'react';\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component'\n\n//Functional Component\nexport const CardList = props => {//props in this case will be an object containing an array element called 'monsters'\n    //console.log(props)// Return an object of all attributes give to this Component\n    return <div className='card-list'>\n        {props.monsters.map(monster => {\n          return (\n            <Card key={monster.id} monster={monster}> </Card>\n          )\n        })}\n        \n         </div>//returning children inside a <div>\n} ","import React from 'react';\nimport './search-box.styles.css'\n\n//Functional Component\nexport const SearchBox = ( {placeholder, handleChange }) => (\n    <div>\n        <label>Search Monsters: </label>\n        <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange } />\n    </div>\n)","// import React from 'react';\nimport React, {Component} from 'react'; //importing from react lib\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\nimport './App.css';\n\n//CLASS COMPONENT\nclass App extends Component{\n  constructor(){\n    super(); //allows us to use all properties of this Component class including state object. It calls React.Component's constructor()\n    this.state = {\n      // string:\"Abhishek Das\",\n      monsters: [], \n      searchField: \"\"\n    }\n\n    //ES5\n    // this.handleChange= this.handleChange.bind(this);\n     //binding the 'this' keyword binded to our app component so that it can work with handleChange function defined below.\n  }\n\n  //Life Cycle Method\n  componentDidMount(){\n    //lets make an API request to the given URL\n    fetch('https://jsonplaceholder.typicode.com/users') //fetch return a promise object\n    .then(response => response.json())//response is an object returned by the fetch statement. A response contain body of the c=actua response caan be obtained. but we need it in JSON format.\n    //the ABove statement return another promise.\n    //.then(users => console.log(users));//this will get the array we want, the actual data.\n    .then(users =>  this.setState({monsters: users}))\n    \n  }\n\n  //in the LIFECYCLE METHOD above we did not needed to context our this keyword as it is prebuilt with component class. \n\n  //ES5\n  // handleChange(e){\n  //   this.setState({searchField: e.target.value});\n  // }  (here the 'this' keyword has to be contexted in the constructor method.)\n\n  //ES6\n  handleChange = (e) => {\n      this.setState({searchField: e.target.value});\n    }//this arrow function binds any reference to this inside of it to the contextin which it was defined i.e our app component. \n\n  render(){//we get render() from Component property of React Library\n\n    // const monsters = this.state.monsters;\n    // const searchField = this.state.searchField;\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App Outer-container\">\n      <h1>Monster Rolodex</h1>\n        <SearchBox \n        placeholder=\"Search Monsters...\"\n        handleChange = {this.handleChange}></SearchBox>\n        <CardList monsters = {filteredMonsters }> </CardList>\n        \n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1>{this.state.string}</h1>\n          <p>\n            Edit <code>src/App.js</code> and save to reload  now.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <br />\n       <button onClick={() => this.setState({ string : \"Abhijit Das\" })}>Change name</button> \n        </header> */}\n      </div>\n    );\n  }\n}\n\n\n//FUNCTIONAL COMPONENT\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload  now.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}